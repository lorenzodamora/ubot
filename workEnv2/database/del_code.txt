    elif cmd_txt == 'tg':
        await msg.edit_text(str(msg.reply_to_message_id))

    elif cmd_txt == 'delp':
        from asyncio import sleep
        await msg.edit_text(f"del perpetuo starting")
        iid = msg.id
        while True:
            ids = []
            for i in range(0, 10):
                ids.append(iid)
                if iid == 730:
                    return
                iid -= 1
            # uncomplete = True
            # while uncomplete:
                # try:
            await client.delete_messages(chat_id=TERMINAL_ID, message_ids=ids)
            print(ids)
                    # uncomplete = False
                # except:
                    # await sleep(1)

    elif cmd_txt == 'test':
    # \'''
        st = 408
        await msg.edit_text(f"test starting\nst:{st} = {st*198}, msgs per blocco: 198")
        # for j in range(st, 50000):
          #  open(f"./search/search{j}.json", 'w').truncate()
        from asyncio import sleep
        await sleep(2)
        pass
        # jenny id = 6395926932
        from pyrogram.raw.functions.messages import GetMessages
        from pyrogram.raw.types import InputMessageID
        from pyrogram.raw.types.messages import Messages
        from typing import Union
        from pyrogram.enums import ParseMode
        ps = ParseMode.DISABLED
        for j in range(st, 10000):
            input_msgs = []
            fr = 198 * j + 1  # parte da 1 # comincia da 199
            to = 198 * j + 1 + 197 + 1  # si ferma a 198 incluso
            ra = range(fr, to)
            # print(f"range: {fr},{to}", end=" ")
            for i in ra:
                input_msgs.append(InputMessageID(id=i))
            get_messages_request = GetMessages(id=input_msgs)
            uncomplete = True
            result: Union[Messages | None] = None
            while uncomplete:
                try:
                    result = await client.invoke(get_messages_request)
                    uncomplete = False
                except:
                    await sleep(30); print("30", end=" ")

            ret = str(result)
            with open(f"./search/search{j}.json", 'w', encoding='utf-8')as file:
                file.write(ret)
                file.truncate()
            ret = ''
            for i in range(0, 198):  # da 0 a 197
                m = result.messages[i]
                # print(i, end=" ")
                pre = f"id: {m.id} => "
                t = str(type(m))
                if "pyrogram.raw.types.message.Message" in t:
                    text = False
                    if hasattr(getattr(m, "peer_id", None), "user_id"):
                        uid = m.peer_id.user_id
                        if 572621020 == uid:
                            pre += "Hexa"
                        elif 198626752 == uid:
                            pre += "WereWolf"
                        elif 311460626 == uid:
                            pre += "Social8Ball"
                        elif 319945680 == uid:
                            pre += "BgSchool"
                        elif 1976201765 == uid:
                            pre += "WaifuGacha"
                        else:
                            pre += f"user id: {uid}\n"
                            text = True
                    else:
                        pre += "m.peer_id.user_id non esiste\n"
                        text = True
                    if m.message and text:
                        pre += f"text: {m.message}"
                    elif text:
                        pre += "m.message non esiste"
                else:
                    if "pyrogram.raw.types.message_empty.MessageEmpty" in t:
                        continue
                    else:
                        pre += t
                ret += pre + "\n"

            chunk_size = 4096
            chunks = [ret[i:i + chunk_size] for i in range(0, len(ret), chunk_size)]

            mmsg: Union[Msg | None] = None
            uncomplete = True
            while uncomplete:
                try:
                    mmsg = await client.send_message(chat_id=TERMINAL_ID, text=f"from {fr} to {to}",
                                                     parse_mode=ps)
                    uncomplete = False
                except:
                    await sleep(20); print("20.1", end=" ")

            if ret == '':
                uncomplete = True
                while uncomplete:
                    try:
                        await client.send_message(chat_id=TERMINAL_ID, text=f"empty", parse_mode=ps)
                        uncomplete = False
                    except:
                        await sleep(20); print("20.2", end=" ")

            else:
                for chunk in chunks:
                    uncomplete = True
                    while uncomplete:
                        try:
                            await client.send_message(chat_id=TERMINAL_ID, text=str(chunk), parse_mode=ps)
                            uncomplete = False
                        except:
                            await sleep(20); print("20.3", end=" ")
                    # end while
                # end for
            uncomplete = True
            while uncomplete:
                try:
                    await mmsg.reply_text(text="fine blocco", parse_mode=ps)
                    uncomplete = False
                except:
                    await sleep(5); print("5", end=" ")
        # \'''
        await sleep(60)
        await client.send_message(chat_id=TERMINAL_ID, text="End test")
        print("END")
        from pushbullet import Pushbullet
        from ..myClientParameter import pushbullet_API_KEY as pushKey
        pb = Pushbullet(pushKey)
        pb.push_note("Ubot2", "END TEST")

    # TODO check parametri, rename, add to help, exceptions
    elif check_cmd(cmd_txt, {'test': 2}):
        from pyrogram.raw.functions.messages import GetMessages
        from pyrogram.raw.types import InputMessageID
        from asyncio import sleep
        in_ms = []
        fr, to = map(int, cmd_txt[4:].split(" "))

        # print(fr, end=' ')
        # print(to, end=' ')
        for i in range(fr, to):
            in_ms.append(InputMessageID(id=i))
        get_messages_request = GetMessages(id=in_ms)
        result = await client.invoke(get_messages_request)
        open(f"./search.json", 'w', encoding='utf-8').write(str(result))
        ret = ''
        for i in range(0, len(in_ms)):
            m = result.messages[i]
            print(i, end=" ")
            pre = f"id: {m.id} => "
            t = str(type(m))
            if "pyrogram.raw.types.message.Message" in t:
                text = False
                if hasattr(getattr(m, "peer_id", None), "user_id"):
                    uid = m.peer_id.user_id
                    # print(uid, end=' ')
                    if 572621020 == uid:
                        pre += "Hexa"
                    elif 198626752 == uid:
                        pre += "WereWolf"
                    elif 311460626 == uid:
                        pre += "Social8Ball"
                    elif 319945680 == uid:
                        pre += "BgSchool"
                    elif 1976201765 == uid:
                        pre += "WaifuGacha"
                    else:
                        pre += f"user id: {uid}\n"
                        text = True
                else:
                    pre += "m.peer_id.user_id non esiste\n"
                    text = True
                if m.message and text:
                    pre += f"text: {m.message}"
                elif text:
                    pre += "m.message non esiste"
            else:
                if "pyrogram.raw.types.message_empty.MessageEmpty" in t:
                    continue
                else:
                    pre += t
            ret += pre + "\n"

        chunk_size = 4096
        chunks = [ret[i:i + chunk_size] for i in range(0, len(ret), chunk_size)]

        if ret == '':
            uncomplete = True
            while uncomplete:
                try:
                    await client.send_message(chat_id=TERMINAL_ID, text=f"empty", parse_mode=ps)
                    uncomplete = False
                except:
                    await sleep(20)
                    print("20.2", end=" ")

        else:
            for chunk in chunks:
                uncomplete = True
                while uncomplete:
                    try:
                        await client.send_message(chat_id=TERMINAL_ID, text=str(chunk), parse_mode=ps)
                        uncomplete = False
                    except:
                        await sleep(20)
                        print("20.3", end=" ")

    elif cmd_txt == 'fold':
        from pyrogram.raw.functions.messages import GetDialogFilters
        from asyncio import sleep
        raw_folders = await client.invoke(GetDialogFilters())
        txt = str(vars(raw_folders))
        if txt == "":
            txt = "empty"
        chunk_s = 4096
        chunks = [txt[i:i + chunk_s] for i in range(0, len(txt), chunk_s)]

        for chunk in chunks:
            uncomplet = True
            while uncomplet:
                try:
                    await client.send_message(chat_id=TERMINAL_ID, text=str(chunk), parse_mode=ps)
                    uncomplet = False
                except:
                    await sleep(20)
            # end while
        # end for

    # region ChatGPT
    elif check_cmd(cmd_txt, {'gpt': 2, 'chatGPT': 2}):
        from .gpt import chatpgt
        await chatpgt(msg)

    elif check_cmd(cmd_txt, {'rgpt': 2, 'replyChatGPT': 2}):
        rmsg = msg.reply_to_message
        if rmsg:
            from .gpt import chatpgt
            await chatpgt(rmsg)
        else:
            await client.send_message(chat_id=TERMINAL_ID, text=f"nessun reply per il comando {PC}rgpt")

    elif check_cmd(cmd_txt, {'gptst': 2, 'gptSet': 2}):
        from .gpt import chatpgt_set_key
        await chatpgt_set_key(msg)

    elif check_cmd(cmd_txt, {'gptcl': 2, 'gptClear': 2}):
        from .gpt import chatpgt_clear
        await chatpgt_clear(msg)

        '''
    elif cmd_txt == 'pingt':
        from .commands import pong
        await pong(client, msg, True)
        '''
        # await client.send_message(chat_id=msg.chat.id, text=str(vars(client)) + "\ndone")

        '''
    elif check_cmd(cmd_txt, {'del': 2}):
        await msg.delete()
        ids = []
        try:
            n = int(cmd_txt.split(" ")[1])
        except:
            n = 1
        try:
            rmsg = msg.reply_to_message
            start = rmsg.id if rmsg else msg.id - 1
            for i in range(0, n):
                ids.append(start - i)
            effettivi = await client.delete_messages(chat_id=msg.chat.id, message_ids=ids)
            x = 0
            while effettivi != n:
                x += 1
                effettivi += await client.delete_messages(chat_id=msg.chat.id, message_ids=start-n-x)
        except Exception as e:
            await client.send_message(chat_id=TERMINAL_ID, text=f"comando {msg.text}\n"
                                                                f"Errore:\n{e}\n{e.with_traceback(None)}")
        '''

"""
import asyncio


# Assuming you have the task number stored in a variable called task_number
async def print_atask():
    tasks = asyncio.all_tasks()
    for task in tasks:
        print(task)


async def onetask(name):
    await asyncio.sleep(1)
    print("wake up " + name)


async def cancel_task_by_name(name: str):
    tasks = asyncio.all_tasks()
    for task in tasks:
        if task.get_name() == name:
            task.cancel()
            return True
    return False


async def main():
    task1 = asyncio.create_task(onetask("1"), name="1")
    _ = asyncio.create_task(onetask("2"), name="2")
    await print_atask()
    print(await cancel_task_by_name("2"))
    await task1

if __name__ == "__main__":
    from platform import python_version_tuple
    if python_version_tuple() >= ("3", "11"):
        with asyncio.Runner() as runner:
            runner.get_loop().run_until_complete(main())
"""

                """
                from .myParameters import all_output
                import os

                # Filtra solo i file di collegamento
                shortcut_files = [file for file in os.listdir(all_output)
                                  if os.path.islink(os.path.join(all_output, file))]
                # Itera sui file di collegamento
                for shortcut_file in shortcut_files:
                    percorso_collegamento = os.path.join(all_output, shortcut_file)
                    percorso_file = os.path.realpath(percorso_collegamento)
                    await printoutput(percorso_file, shortcut_file)
                """

        '''
    elif check_cmd(cmd_txt, {'genera': 2}):
        txt = msg.text[8:]
        pri = ''
        for c in txt:
            pri += c
            try:
                await msg.edit_text(pri)
            except:
                pass
        '''

"""
async def anti_flood_cycle(c: Client, text: str, chat_id: Union[int, str], parse_mode: Optional["ParseMode"]):
    from pyrogram.errors.exceptions.flood_420 import FloodWait
    uncomplete = True
    while uncomplete:
        try:
            await c.send_message(chat_id, str(text), parse_mode=parse_mode)
            uncomplete = False
        except FloodWait as e:
            await sleep(e.value)
"""

async def markdown_escape(m: Msg):

    def _markdown_escape(text: str):
        return text

    new_text = None
    edit = m.edit

    if m.text:
        new_text = _markdown_escape(m.text)

    elif m.caption:
        edit = m.edit_caption
        new_text = _markdown_escape(m.text)

    if new_text:
        m = await edit(new_text, entities=m.entities)

    return m

.venv/Lib/site-packages/pyrogram/parser/markdown.py

BOLD_DELIM = "**"
ITALIC_DELIM = "__"
UNDERLINE_DELIM = "--"
STRIKE_DELIM = "~~"
SPOILER_DELIM = "||"
CODE_DELIM = "`"
PRE_DELIM = "```"
BLOCKQUOTE_DELIM = ">"

MARKDOWN_RE = re.compile(r"({d})|(!?)\[(.+?)\]\((.+?)\)".format(
    d="|".join(
        ["".join(i) for i in [
            [rf"\{j}" for j in i]
            for i in [
                PRE_DELIM,
                CODE_DELIM,
                STRIKE_DELIM,
                UNDERLINE_DELIM,
                ITALIC_DELIM,
                BOLD_DELIM,
                SPOILER_DELIM
            ]
        ]]
    )))

OPENING_TAG = "<{}>"
CLOSING_TAG = "</{}>"
URL_MARKUP = '<a href="{}">{}</a>'
EMOJI_MARKUP = '<emoji id={}>{}</emoji>'
FIXED_WIDTH_DELIMS = [CODE_DELIM, PRE_DELIM]

.venv/Lib/site-packages/pyrogram/parser/markdown.py